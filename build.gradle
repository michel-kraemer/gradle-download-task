buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:0.5'
    }
}

plugins {
    id "com.gradle.build-scan" version "1.16"
    id "com.gradle.plugin-publish" version "0.9.9"
}

buildScan {
  termsOfServiceUrl = 'https://gradle.com/terms-of-service'
  termsOfServiceAgree = 'yes'
}

apply plugin: 'java-gradle-plugin'
apply plugin: 'jacoco'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'com.jfrog.bintray'
apply from: "gradle/integrationTest.gradle"

group = 'de.undercouch'
version = '3.4.3'
sourceCompatibility = '1.6'
targetCompatibility = '1.6'

idea {
  project {
    languageLevel = '1.6'
    ipr {
      withXml { provider ->
        provider.node.component
          .find { it.@name == 'VcsDirectoryMappings' }
          .mapping.@vcs = 'Git'
      }
    }
  }
}

eclipseClasspath.dependsOn pluginUnderTestMetadata

repositories {
    jcenter()
    mavenCentral()
}

dependencies {
    compile gradleApi()
    compile 'org.apache.httpcomponents:httpclient:4.5.3'

    testCompile 'junit:junit:4.12'
    testCompile 'org.littleshoot:littleproxy:1.1.0-beta2'
    testCompile 'org.mortbay.jetty:jetty:6.1.26'
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.14'
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

// improve test output when we're using a plain console (e.g. on the CI server)
test {
    jvmArgs += ['-Xmx512M', '-XX:MaxPermSize=256M']
    if (gradle.startParameter.consoleOutput == ConsoleOutput.Plain) {
        testLogging {
            events "passed", "skipped", "failed"
        }
    }
}

jar {
    // include license into jar
    from 'LICENSE.txt'
}

// package javadoc into a jar file
task packageJavadoc(type: Jar, dependsOn: 'javadoc') {
    from javadoc.destinationDir
    classifier = 'javadoc'
}

// package source into a jar file
task packageSources(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

// define artifacts for upload
artifacts {
    archives jar
    archives packageJavadoc
    archives packageSources
}

def configurePom(def pom) {
    // ensure correct artifact ID
    pom.artifactId = 'gradle-download-task'

    // pom file details
    pom.project {
        name 'gradle-download-task'
        packaging 'jar'
        description 'Adds a download task to Gradle that displays progress information'
        url 'https://github.com/michel-kraemer/gradle-download-task'

        scm {
            url 'scm:git:git://github.com/michel-kraemer/gradle-download-task.git'
            connection 'scm:git:git://github.com/michel-kraemer/gradle-download-task.git'
            developerConnection 'scm:git:git://github.com/michel-kraemer/gradle-download-task.git'
        }

        licenses {
            license {
                name 'The Apache Software License, Version 2.0'
                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                distribution 'repo'
            }
        }

        developers {
            developer {
                id 'michel-kraemer'
                name 'Michel Kraemer'
                email 'michel@undercouch.de'
            }
        }
    }
}

install {
    repositories.mavenInstaller {
        // ensure correct artifact ID when installing locally
        configurePom(pom)
    }
}

// sign all artifacts
signing {
    required { !version.endsWith('SNAPSHOT') && gradle.taskGraph.hasTask('uploadArchives') }
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            // sign artifacts before upload
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            // upload to sonatype OSS
            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2") {
                authentication(userName: this.hasProperty('sonatypeUsername') ? sonatypeUsername : '',
                    password: this.hasProperty('sonatypePassword') ? sonatypePassword : '')
            }
            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots") {
                authentication(userName: this.hasProperty('sonatypeUsername') ? sonatypeUsername : '',
                    password: this.hasProperty('sonatypePassword') ? sonatypePassword : '')
            }

            configurePom(pom)
        }
    }
}

bintray {
    user = this.hasProperty('bintrayUser') ? bintrayUser : ''
    key = this.hasProperty('bintrayApiKey') ? bintrayApiKey : ''

    configurations = ['archives']

    dryRun = false
    publish = !project.version.endsWith('-SNAPSHOT')
    pkg {
        def githubUrl = 'https://github.com/michel-kraemer/gradle-download-task'
        repo = 'maven'
        name = 'de.undercouch:gradle-download-task'
        desc = 'Adds a download task to Gradle that displays progress information'
        websiteUrl = githubUrl
        issueTrackerUrl = "$githubUrl/issues"
        vcsUrl = "${githubUrl}.git"
        licenses = ['Apache-2.0']
        labels = ['gradle', 'download', 'task', 'plugin', 'progress', 'url', 'server', 'file', 'http']
        publicDownloadNumbers = true
        // version descriptor
        version {
            name = project.version
            attributes = ['gradle-plugin': "de.undercouch.download:${project.group}:gradle-download-task"]
        }
    }
}

pluginBundle {
    website = 'https://github.com/michel-kraemer/gradle-download-task'
    vcsUrl = 'https://github.com/michel-kraemer/gradle-download-task'
    description = 'Adds a download task to Gradle that displays progress information'

    plugins {
        greetingsPlugin {
            id = 'de.undercouch.download'
            displayName = 'gradle-download-task'
            description = 'Adds a download task to Gradle that displays progress information'
            tags = ['download', 'task', 'progress', 'url', 'server', 'file', 'http']
        }
    }

    mavenCoordinates {
        groupId = "de.undercouch"
        artifactId = "gradle-download-task"
    }
}
