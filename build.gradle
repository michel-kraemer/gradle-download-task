plugins {
    id "com.gradle.plugin-publish" version "1.2.1"
    id "com.github.johnrengelman.shadow" version "8.1.1"
    id "io.github.gradle-nexus.publish-plugin" version "1.3.0"
}

apply plugin: 'java-gradle-plugin'
apply plugin: 'jacoco'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply from: "gradle/integrationTest.gradle"

group = 'de.undercouch'
version = '5.5.0'

java {
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
}

ext {
    isReleaseVersion = !version.endsWith("SNAPSHOT")
    junitVersion = '5.10.1'

    // on CI server, limit functional tests to major versions to avoid running
    // out of open file descriptors (happens when we load the jar files of too
    // many Gradle distributions into memory)
    if ("true".equals(System.getenv("CI"))) {
        limitedVersionsToTest = [
            "5.6.4",
            "6.9.4",
            "7.6.3",
            "8.4"
        ]
    } else {
        limitedVersionsToTest = versionsToTest
    }
}

repositories {
    mavenCentral()
}

configurations {
    jacocoRuntime
}

dependencies {
    shadow gradleApi()
    implementation 'org.apache.httpcomponents.client5:httpclient5:5.2.1'

    // Disable logging. This avoids slf4j warning and might also improve download performance.
    // See issue 141 (https://github.com/michel-kraemer/gradle-download-task/issues/141)
    implementation 'org.slf4j:slf4j-nop:1.7.36'

    testImplementation "commons-codec:commons-codec:1.16.0"
    testImplementation "commons-io:commons-io:2.15.1"
    testImplementation "com.github.tomakehurst:wiremock-jre8:2.35.0"
    testImplementation "org.assertj:assertj-core:3.24.2"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$junitVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
    testImplementation "org.mockito:mockito-core:4.8.0"
    testImplementation "xyz.rogfam:littleproxy:2.0.19"

    jacocoRuntime "org.jacoco:org.jacoco.agent:${jacoco.toolVersion}:runtime"
}

jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
    }
}

// configure functional tests
task functionalTest

for (v in limitedVersionsToTest) {
    def vn = v.replace(".", "_")
    task "functionalTest_$vn"(type: Test) {
        include "**/FunctionalDownloadTest.class"
        systemProperty 'gradleVersionUnderTest', v
    }
    functionalTest.dependsOn("functionalTest_$vn")
}

test.finalizedBy(functionalTest)

tasks.withType(Test).all {
    // use junit5 for tests
    useJUnitPlatform()

    // improve test output on plain console (e.g. on CI server)
    if (gradle.startParameter.consoleOutput == ConsoleOutput.Plain) {
        testLogging {
            events "standard_out", "passed", "skipped", "failed"
        }
    }

    systemProperty 'jacocoRuntimePath', configurations.jacocoRuntime.asPath
    systemProperty 'jacocoDestFile', jacoco.destinationFile
}

jar {
    // include license into jar
    from 'LICENSE.txt'
}

shadowJar {
    archiveClassifier = ""
    enableRelocation = true
    relocationPrefix = "de.undercouch.gradle.tasks.download"
    relocate 'mozilla', 'de.undercouch.gradle.tasks.download.mozilla'
}

// Disabling default jar task as it is overridden by shadowJar
// This also prevents us from accidentally publishing the wrong jar
tasks.named("jar").configure {
    enabled = false
}

def configurePom(pom) {
    pom.description = 'Adds a download task to Gradle that displays progress information'
    pom.url = 'https://github.com/michel-kraemer/gradle-download-task'

    pom.scm {
        url = 'scm:git:git://github.com/michel-kraemer/gradle-download-task.git'
        connection = 'scm:git:git://github.com/michel-kraemer/gradle-download-task.git'
        developerConnection = 'scm:git:git://github.com/michel-kraemer/gradle-download-task.git'
    }

    pom.licenses {
        license {
            name = 'The Apache Software License, Version 2.0'
            url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
            distribution = 'repo'
        }
    }

    pom.developers {
        developer {
            id = 'michel-kraemer'
            name = 'Michel Kraemer'
            email = 'michel@undercouch.de'
            url = 'https://michelkraemer.com'
        }
    }
}

publishing {
    publications {
        pluginMaven(MavenPublication) {
            pom { pom ->
               artifactId = 'gradle-download-task'
               name = 'gradle-download-task'
               packaging = 'jar'

               configurePom(pom)
           }
        }
    }

    afterEvaluate {
        publications {
            downloadPluginPluginMarkerMaven {
                pom { pom ->
                    configurePom(pom)
                }
            }
        }
    }
}

signing {
    // use GPG to sign artifacts
    useGpgCmd()
}

tasks.withType(Sign) {
    onlyIf {
        // only sign release artifacts and not snapshots
        if (!isReleaseVersion) {
            return false
        }

        // don't sign on CI server - it fails without a key
        if ("true".equals(System.getenv("CI"))) {
            return false
        }

        return true
    }
}

nexusPublishing {
    repositories {
        sonatype()
    }
}

gradlePlugin {
    website = 'https://github.com/michel-kraemer/gradle-download-task'
    vcsUrl = 'https://github.com/michel-kraemer/gradle-download-task'
    plugins {
        downloadPlugin {
            id = 'de.undercouch.download'
            implementationClass = 'de.undercouch.gradle.tasks.download.DownloadTaskPlugin'
            displayName = 'gradle-download-task'
            description = 'Adds a download task to Gradle that displays progress information'
            tags.set(['download', 'task', 'progress', 'url', 'server', 'file', 'http', 'https'])
        }
    }
}
